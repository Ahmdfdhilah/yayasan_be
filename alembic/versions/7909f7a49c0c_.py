"""Remove RPP type constraints and column for flexible RPP submissions

Revision ID: 7909f7a49c0c
Revises:
Create Date: 2025-08-12 01:03:44.351851

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "7909f7a49c0c"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("ix_statistics_display_order", table_name="statistics")
    op.drop_index("ix_statistics_title", table_name="statistics")
    op.drop_table("statistics")
    op.create_foreign_key(
        None, "media_files", "organizations", ["organization_id"], ["id"]
    )
    op.create_foreign_key(None, "media_files", "users", ["uploader_id"], ["id"])
    op.create_foreign_key(None, "organizations", "users", ["head_id"], ["id"])
    # Safely alter password_reset_tokens columns with USING clause
    try:
        op.execute("ALTER TABLE password_reset_tokens ALTER COLUMN created_by TYPE INTEGER USING created_by::integer")
    except Exception:
        # Column might already be integer or have NULL values
        try:
            op.execute("ALTER TABLE password_reset_tokens ALTER COLUMN created_by TYPE INTEGER USING CASE WHEN created_by ~ '^[0-9]+$' THEN created_by::integer ELSE NULL END")
        except Exception:
            pass
    
    try:
        op.execute("ALTER TABLE password_reset_tokens ALTER COLUMN updated_by TYPE INTEGER USING updated_by::integer")
    except Exception:
        try:
            op.execute("ALTER TABLE password_reset_tokens ALTER COLUMN updated_by TYPE INTEGER USING CASE WHEN updated_by ~ '^[0-9]+$' THEN updated_by::integer ELSE NULL END")
        except Exception:
            pass
    
    try:
        op.execute("ALTER TABLE password_reset_tokens ALTER COLUMN deleted_by TYPE INTEGER USING deleted_by::integer")
    except Exception:
        try:
            op.execute("ALTER TABLE password_reset_tokens ALTER COLUMN deleted_by TYPE INTEGER USING CASE WHEN deleted_by ~ '^[0-9]+$' THEN deleted_by::integer ELSE NULL END")
        except Exception:
            pass
    op.create_foreign_key(None, "password_reset_tokens", "users", ["user_id"], ["id"])
    
    # Safely drop unique constraint if exists
    try:
        op.drop_constraint(
            "uq_teacher_period_rpp_type", "rpp_submission_items", type_="unique"
        )
    except Exception:
        # Constraint might not exist, continue
        pass
        
    op.create_foreign_key(None, "rpp_submission_items", "users", ["teacher_id"], ["id"])
    op.create_foreign_key(
        None, "rpp_submission_items", "rpp_submissions", ["rpp_submission_id"], ["id"]
    )
    op.create_foreign_key(
        None, "rpp_submission_items", "media_files", ["file_id"], ["id"]
    )
    
    # Safely drop rpp_type column if exists
    try:
        op.drop_column("rpp_submission_items", "rpp_type")
    except Exception:
        # Column might not exist, continue
        pass
    op.create_foreign_key(None, "rpp_submissions", "users", ["reviewer_id"], ["id"])
    op.create_foreign_key(None, "rpp_submissions", "users", ["teacher_id"], ["id"])
    op.create_foreign_key(None, "teacher_evaluations", "users", ["teacher_id"], ["id"])
    op.create_foreign_key(
        None, "teacher_evaluations", "users", ["evaluator_id"], ["id"]
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "teacher_evaluations", type_="foreignkey")
    op.drop_constraint(None, "teacher_evaluations", type_="foreignkey")
    op.drop_constraint(None, "rpp_submissions", type_="foreignkey")
    op.drop_constraint(None, "rpp_submissions", type_="foreignkey")
    
    # Safely re-add rpp_type column if it doesn't exist
    try:
        op.add_column(
            "rpp_submission_items",
            sa.Column(
                "rpp_type",
                postgresql.ENUM(
                    "RENCANA_PROGRAM_HARIAN",
                    "RENCANA_PROGRAM_SEMESTER", 
                    "RENCANA_PROGRAM_TAHUNAN",
                    name="rpptype",
                ),
                autoincrement=False,
                nullable=True,  # Make nullable initially
            ),
        )
        # Update existing rows with a default value
        op.execute("UPDATE rpp_submission_items SET rpp_type = 'RENCANA_PROGRAM_HARIAN' WHERE rpp_type IS NULL")
        # Then make it non-nullable
        op.alter_column("rpp_submission_items", "rpp_type", nullable=False)
    except Exception:
        # Column might already exist, continue
        pass
        
    op.drop_constraint(None, "rpp_submission_items", type_="foreignkey")
    op.drop_constraint(None, "rpp_submission_items", type_="foreignkey")
    op.drop_constraint(None, "rpp_submission_items", type_="foreignkey")
    
    # Safely re-add unique constraint if it doesn't exist
    try:
        op.create_unique_constraint(
            "uq_teacher_period_rpp_type",
            "rpp_submission_items",
            ["teacher_id", "period_id", "rpp_type"],
            postgresql_nulls_not_distinct=False,
        )
    except Exception:
        # Constraint might already exist, continue
        pass
    op.drop_constraint(None, "password_reset_tokens", type_="foreignkey")
    
    # Safely revert password_reset_tokens columns back to VARCHAR
    try:
        op.execute("ALTER TABLE password_reset_tokens ALTER COLUMN deleted_by TYPE VARCHAR USING deleted_by::varchar")
    except Exception:
        pass
        
    try:
        op.execute("ALTER TABLE password_reset_tokens ALTER COLUMN updated_by TYPE VARCHAR USING updated_by::varchar")
    except Exception:
        pass
        
    try:
        op.execute("ALTER TABLE password_reset_tokens ALTER COLUMN created_by TYPE VARCHAR USING created_by::varchar")
    except Exception:
        pass
    op.drop_constraint(None, "organizations", type_="foreignkey")
    op.drop_constraint(None, "media_files", type_="foreignkey")
    op.drop_constraint(None, "media_files", type_="foreignkey")
    op.create_table(
        "statistics",
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "deleted_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("deleted_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("title", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("stats", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("img_url", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("display_order", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="statistics_pkey"),
    )
    op.create_index("ix_statistics_title", "statistics", ["title"], unique=False)
    op.create_index(
        "ix_statistics_display_order", "statistics", ["display_order"], unique=False
    )
    # ### end Alembic commands ###
