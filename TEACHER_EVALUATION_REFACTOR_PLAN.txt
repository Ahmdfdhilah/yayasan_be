TEACHER EVALUATION REFACTOR PLAN - BEFORE & AFTER DOCUMENTATION
================================================================

## CURRENT STATE (BEFORE REFACTOR)

### Current Architecture
- Single table approach: One TeacherEvaluation record per teacher-aspect-period combination
- Individual evaluation records for each aspect evaluation
- Manual aggregation needed for total scores and averages
- No centralized summary per teacher per period

### Current Model Structure
```
TeacherEvaluation (current):
├─ id (PK)
├─ teacher_id (FK to users)
├─ evaluator_id (FK to users) 
├─ aspect_id (FK to evaluation_aspects)
├─ period_id (FK to periods)
├─ grade (A/B/C/D enum)
├─ score (computed from grade: A=4, B=3, C=2, D=1)
├─ notes (optional)
├─ evaluation_date (timestamp)
└─ BaseModel fields (created_at, updated_at, etc.)

Constraint: Unique teacher_id + aspect_id + period_id
```

### Current Issues
1. No easy way to get total/average scores per teacher per period
2. No final evaluation summary or overall notes
3. Manual calculation needed for performance metrics
4. Complex queries for dashboard and reporting
5. No single record representing complete teacher evaluation

### Current API Endpoints (22 endpoints)
- CRUD operations per individual evaluation
- Bulk assignment and grade updates
- Period-based filtering and statistics
- Teacher-specific evaluation retrieval
- Manual aggregation for totals

### Current Schema Structure
- TeacherEvaluationCreate/Update for individual evaluations
- TeacherEvaluationBulkCreate/Update for bulk operations
- TeacherEvaluationResponse with individual aspect data
- Manual aggregation in service layer for summaries

## PROPOSED STATE (AFTER REFACTOR)

### New Architecture - Parent-Child Model
- Parent: TeacherEvaluation (one per teacher per period) - aggregate/summary
- Child: TeacherEvaluationItem (one per aspect) - individual evaluations  
- Auto-calculated totals and averages
- Real-time synchronization between items and parent

### New Model Structure

```
TeacherEvaluation (parent - aggregate):
├─ id (PK)
├─ teacher_id (FK to users)
├─ evaluator_id (FK to users)
├─ period_id (FK to periods)
├─ total_score (calculated from items)
├─ average_score (calculated from items)
├─ final_grade (calculated from average)
├─ final_notes (optional summary from kepala sekolah)
├─ last_updated (auto-update when items change)
└─ BaseModel fields

Constraint: Unique teacher_id + period_id + evaluator_id

TeacherEvaluationItem (child - individual aspects):
├─ id (PK)
├─ teacher_evaluation_id (FK to teacher_evaluations)
├─ aspect_id (FK to evaluation_aspects)
├─ grade (A/B/C/D enum)
├─ score (computed from grade)
├─ notes (optional per aspect)
├─ evaluated_at (timestamp per aspect)
└─ BaseModel fields

Constraint: Unique teacher_evaluation_id + aspect_id
```

### New Relationships
```
TeacherEvaluation (parent):
├─ teacher: User (back_populates="received_evaluations")
├─ evaluator: User (back_populates="conducted_evaluations") 
├─ period: Period (back_populates="teacher_evaluations")
└─ items: List[TeacherEvaluationItem] (back_populates="teacher_evaluation")

TeacherEvaluationItem (child):
├─ teacher_evaluation: TeacherEvaluation (back_populates="items")
└─ aspect: EvaluationAspect (back_populates="teacher_evaluation_items")
```

### Auto-Calculation Logic
1. When TeacherEvaluationItem is created/updated:
   - Recalculate parent total_score (sum of all item scores)
   - Recalculate parent average_score (total_score / item_count)
   - Recalculate parent final_grade (based on average_score)
   - Update parent last_updated timestamp

2. Grade calculation:
   - A (Excellent): 4 points
   - B (Good): 3 points  
   - C (Satisfactory): 2 points
   - D (Needs Improvement): 1 point

3. Final grade mapping:
   - Average 3.5-4.0: A
   - Average 2.5-3.4: B
   - Average 1.5-2.4: C
   - Average 1.0-1.4: D

## MIGRATION STRATEGY

### Files to be Created
1. `src/models/teacher_evaluation_item.py` - New child model

### Files to be Modified
1. `src/models/teacher_evaluation.py` - Convert to parent model
2. `src/schemas/teacher_evaluation.py` - New request/response schemas
3. `src/repositories/teacher_evaluation.py` - New repository methods
4. `src/services/teacher_evaluation.py` - New service logic
5. `src/api/endpoints/teacher_evaluations.py` - Updated endpoints

### Files to be Updated (references)
1. `src/models/user.py` - Update relationships
2. `src/models/period.py` - Update relationships  
3. `src/models/evaluation_aspect.py` - Add new relationship
4. `src/services/dashboard.py` - Update evaluation statistics
5. Any other files importing TeacherEvaluation

### Database Changes
- No alembic needed (fresh start)
- Drop existing teacher_evaluations table
- Create new teacher_evaluations table (parent)
- Create new teacher_evaluation_items table (child)

## NEW API DESIGN

### Simplified Endpoints (estimated 12-15 endpoints)
```
Parent Operations:
POST   /teacher-evaluations/                    # Create evaluation for teacher
GET    /teacher-evaluations/{id}               # Get complete evaluation
PUT    /teacher-evaluations/{id}/final-notes   # Update final notes
DELETE /teacher-evaluations/{id}               # Delete complete evaluation

Item Operations:  
POST   /teacher-evaluations/{id}/items         # Add aspect evaluation
PUT    /teacher-evaluations/{id}/items/{aspect_id}  # Update aspect evaluation
DELETE /teacher-evaluations/{id}/items/{aspect_id}  # Remove aspect evaluation

Bulk Operations:
POST   /teacher-evaluations/bulk-assign        # Assign teachers to period
PATCH  /teacher-evaluations/{id}/bulk-update   # Update multiple aspects

Retrieval:
GET    /teacher-evaluations/period/{period_id} # Get all evaluations in period
GET    /teacher-evaluations/teacher/{teacher_id}/period/{period_id}  # Get teacher evaluation
GET    /teacher-evaluations/period/{period_id}/stats  # Period statistics
```

### New Schema Structure
```
TeacherEvaluationCreate:
├─ teacher_id
├─ evaluator_id  
├─ period_id
└─ final_notes (optional)

TeacherEvaluationItemCreate:
├─ aspect_id
├─ grade
└─ notes (optional)

TeacherEvaluationResponse:
├─ id, teacher_id, evaluator_id, period_id
├─ total_score, average_score, final_grade
├─ final_notes, last_updated
├─ teacher: UserResponse
├─ evaluator: UserResponse
├─ period: PeriodResponse
└─ items: List[TeacherEvaluationItemResponse]

TeacherEvaluationItemResponse:
├─ id, aspect_id, grade, score, notes, evaluated_at
└─ aspect: EvaluationAspectResponse
```

## BENEFITS OF NEW STRUCTURE

### Performance Benefits
1. Faster dashboard queries (pre-calculated totals)
2. Simplified reporting (single record per teacher per period)
3. Reduced complex joins for summary data
4. Better indexing opportunities

### User Experience Benefits  
1. Clear evaluation progress tracking
2. Automatic total/average calculations
3. Final summary notes capability
4. Better mobile/web UI support

### Development Benefits
1. Cleaner API design
2. Reduced code complexity
3. Better separation of concerns
4. Easier testing and maintenance

### Data Integrity Benefits
1. Consistent aggregation
2. Real-time synchronization
3. Better constraint enforcement
4. Audit trail preservation

## ROLLBACK PLAN

If issues occur:
1. Keep backup of current implementation files
2. Database can be recreated from seed scripts
3. Current API contracts preserved where possible
4. Gradual migration of frontend components

## TESTING STRATEGY

1. Unit tests for model calculations
2. Integration tests for repository methods  
3. API endpoint testing
4. Performance testing for large datasets
5. User role permission testing
6. Data consistency validation

========================================
IMPLEMENTATION STARTS AFTER THIS PLAN
========================================